import React, { useState } from 'react';
import { getPosts } from '../../utils/data';
import Link from 'next/link';
import Head from 'next/head';
import { request } from 'graphql-request';
import useSWR from 'swr';

const fetcher = (endpoint, query, variables) => request(endpoint, query, variables);

export const getStaticProps = async () => {
   const data = await fetcher(
      'https://api-us-east-1.graphcms.com/v2/ckwgpr2oa0h8y01xo1s4m0ihb/master',
      `
         query getPost () {
            postsConnection (orderBy: date_DESC, first: 2, skip: 0) {
               edges {
                  node {
                  id
                  title
                  date
                  slug
                  description
                  id
                  author {
                     name
                  }
                  }
               }
               pageInfo {
                  hasNextPage
                  hasPreviousPage
                  pageSize
               }
            }
         }
      
      `      
   )

   return {
      props: {
         posts: data
      },
      revalidate: 10
   }
}

const Blog = ({ posts }) => {

   const [searchValue, setSearchValue] = useState('');
   const [skip, setSkip] = useState(0);
   const { data, error } = useSWR(
      [
      "https://api-us-east-1.graphcms.com/v2/ckwgpr2oa0h8y01xo1s4m0ihb/master",
      `
         query getPost ($searchValue: String $skip: Int) {
            postsConnection (orderBy: date_DESC, where: {title_contains: $searchValue}, first: 2, skip: $skip) {
            edges {
               node {
                  id
                  title
                  date
                  slug
                  description
                  id
                  author {
                  name
                  }
               }
            }
            pageInfo {
               hasNextPage
               hasPreviousPage
               pageSize
            }
            }
         }
      `,
      searchValue,
      skip
   ],
      (endpoint, query) => fetcher(endpoint, query, {searchValue, skip}),
      { initialData: posts, revalidateOnFocus: true }
   )

   if( error){
      return (
         <div>
            <h2>There was an error with the data fetching</h2>
         </div>
      )
   }

   const disabledPrevious = !data?.postsConnection.pageInfo.hasPreviousPage;
   const disabledNext = !data?.postsConnection.pageInfo.hasNextPage;
   
   return (
      <>
      
         <Head>
            <title>Blog</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <div className='max-w-3xl mx-auto px-6 sm:px-6 lg:px-0'>
            <h1 className='text-5xl text-gray-600 font-serif mb-6 font-bold'>The Blog</h1>
            <div className='flex justify-center'>
               <input 
                  type="text" 
                  placeholder='Search post'
                  value={searchValue}
                  onChange={(event) => setSearchValue(event.target.value)}
                  className='outline-none focus:outline-none focus:ring-2 focus:ring-gray-200 rounded-lg border border-gray-200 pl-5 py-2 w-full'
               />
            </div>
            <div className='md:mt-10'>
               {
                  data?.postsConnection.edges.map(post => (
                     <div className='grid grid-cols-1 md:grid-cols-4 py-6' key={post.node.slug}>
                        <div className='mb-2 md:mb-0 md:col-span-1'>
                           <p className='text-gray-500 text-sm'>{new Date(post.node.date).toDateString()}</p>
                        </div>

                        <div className='md:col-span-3'>
                           <Link href={`/blog/${post.node.slug}`}>
                              <a className='text-2xl font-semibold text-gray-900 hover:text-gray-500 transition-colors duration-300'>{post.node.title}</a>
                           </Link>
                           <p className='text-gray-700 leading-loose'>{post.node.description}</p>
                           <div className='text-sm text-gray-900 font-semibold mt-1'>
                              {post.node.author.name}
                           </div>
                        </div>
                     </div>
                  ))
               }
            </div>

            <div className='flex flex-col md:flex-row space-y-5 md:space-y-0 space-x-5 justify-center items-center mt-10'>
               <div className='flex space-x-5'>
                  <div>
                     <button
                        onClick={() => {
                           setSkip(skip - 2)
                        }}
                        disabled={disabledPrevious} 
                        className={`text-center px-3 py-1 rounded-md w-20 ${disabledPrevious ? 'bg-gray-400 text-gray-900 cursor-not-allowed' : 'bg-indigo-700 text-white'}`}>
                        Previous
                     </button>
                  </div>
                  <div>
                     <button 
                        onClick={() => {
                           setSkip(skip + 2)
                        }}
                        disabled={disabledNext} 
                        className={`text-center px-3 py-1 rounded-md w-20 ${disabledNext ? 'bg-gray-400 text-gray-900 cursor-not-allowed' : 'bg-indigo-700 text-white'}`}>
                        Next
                     </button>
                  </div>
               </div>
               <div className='text-gray-700'>Total Pages: <span className='font-bold'>{ data?.postsConnection.pageInfo.pageSize}</span></div>
            </div>
         </div>
      </>
   )
}

export default Blog

